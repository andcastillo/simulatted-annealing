'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function (OCL) {
  /*
    this.db is an object with properties 'oclID' that has as value
    an object that contains the following properties:
    * molecule: an OCL molecule instance
    * index: OCL index used for substructure searching
    * properties: all the calculates properties
    * data: array containing free data associated with this molecule
  */

  var MoleculeDB = function () {
    function MoleculeDB() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, MoleculeDB);

      var _options$computePrope = options.computeProperties,
          computeProperties = _options$computePrope === undefined ? false : _options$computePrope;

      this.db = {};
      this.statistics = null;
      this.computeProperties = computeProperties;
      this.searcher = new OCL.SSSearcherWithIndex();
    }

    _createClass(MoleculeDB, [{
      key: 'pushEntry',
      value: function pushEntry(molecule, data, moleculeInfo) {
        var pushEntry = require('./pushEntry');
        return pushEntry.call({ moleculeDB: this, OCL }, molecule, data, moleculeInfo);
      }
    }, {
      key: 'pushMoleculeInfo',
      value: function pushMoleculeInfo(moleculeInfo, data) {
        var pushMoleculeInfo = require('./pushMoleculeInfo');
        return pushMoleculeInfo.call({ moleculeDB: this, OCL }, moleculeInfo, data);
      }
    }, {
      key: 'search',
      value: function search(query, options) {
        var search = require('./search');
        return search.call({ moleculeDB: this, OCL, searcher: this.searcher }, query, options);
      }
    }, {
      key: 'getDB',
      value: function getDB() {
        var _this = this;

        return Object.keys(this.db).map(function (key) {
          return _this.db[key];
        });
      }
    }]);

    return MoleculeDB;
  }();

  MoleculeDB.parseCSV = function (csv, options) {
    var parseCSV = require('./parseCSV');
    return parseCSV.call({ OCL, MoleculeDB }, csv, options);
  };

  MoleculeDB.parseSDF = function (sdf, options) {
    var parseSDF = require('./parseSDF');
    return parseSDF.call({ OCL, MoleculeDB }, sdf, options);
  };

  return MoleculeDB;
};