'use strict';

/**
 * Search in a MoleculeDB
 * Inside the database all the same molecules are group together
 * @memberof DB
 * @instance
 * @param {string|OCL.Molecule} [query] smiles, molfile, oclCode or instance of Molecule to look for
 * @param {object} [options={}]
 * @param {string} [options.format='oclid'] - query is in the format 'smiles', 'oclid' or 'molfile'
 * @param {string} [options.mode='substructure'] - search by 'substructure', 'exact' or 'similarity'
 * @param {boolean} [options.flattenResult=true] - The database group the data for the same product. This allows to flatten the result
 * @param {boolean} [options.keepMolecule=false] - keep the OCL.Molecule object in the result
 * @param {number} [options.limit=Number.MAX_SAFE_INTEGER] - maximal number of result
 * @return {Array} array of object of the type {(molecule), idCode, data, properties}
 */

function search(query) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$format = options.format,
      format = _options$format === undefined ? 'oclid' : _options$format,
      _options$mode = options.mode,
      mode = _options$mode === undefined ? 'substructure' : _options$mode,
      _options$flattenResul = options.flattenResult,
      flattenResult = _options$flattenResul === undefined ? true : _options$flattenResul,
      _options$keepMolecule = options.keepMolecule,
      keepMolecule = _options$keepMolecule === undefined ? false : _options$keepMolecule,
      _options$limit = options.limit,
      limit = _options$limit === undefined ? Number.MAX_SAFE_INTEGER : _options$limit;


  if (typeof query === 'string') {
    var getMoleculeCreators = require('./moleculeCreators');
    var moleculeCreators = getMoleculeCreators(this.OCL.Molecule);
    query = moleculeCreators.get(format.toLowerCase())(query);
  } else if (!(query instanceof this.OCL.Molecule)) {
    throw new TypeError('toSearch must be a Molecule or string');
  }

  var result = void 0;
  switch (mode.toLowerCase()) {
    case 'exact':
      result = exactSearch(this.moleculeDB.db, query, limit);
      break;
    case 'substructure':
      result = subStructureSearch(this.moleculeDB, query, limit);
      break;
    case 'similarity':
      result = similaritySearch(this.moleculeDB, this.OCL, query, limit);
      break;
    default:
      throw new Error(`unknown search mode: ${options.mode}`);
  }
  return processResult(result, { flattenResult, keepMolecule, limit });
}

function exactSearch(db, query) {
  var queryIDCode = query.getIDCode();
  var searchResult = db[queryIDCode] ? [db[queryIDCode]] : [];
  return searchResult;
}

function subStructureSearch(moleculeDB, query) {
  var resetFragment = false;
  if (!query.isFragment()) {
    resetFragment = true;
    query.setFragment(true);
  }

  var queryMW = getMW(query);
  var queryIndex = query.getIndex();
  var searcher = moleculeDB.searcher;

  searcher.setFragment(query, queryIndex);
  var searchResult = [];
  for (var idCode in moleculeDB.db) {
    var entry = moleculeDB.db[idCode];
    searcher.setMolecule(entry.molecule, entry.index);
    if (searcher.isFragmentInMolecule()) {
      searchResult.push(entry);
    }
  }

  searchResult.sort(function (a, b) {
    return Math.abs(queryMW - a.properties.mw) - Math.abs(queryMW - b.properties.mw);
  });

  if (resetFragment) {
    query.setFragment(false);
  }

  return searchResult;
}

function similaritySearch(moleculeDB, OCL, query) {
  var queryIndex = query.getIndex();
  var queryMW = getMW(query);
  var queryIdCode = query.getIDCode();

  var searchResult = [];
  var similarity = void 0;
  for (var idCode in moleculeDB.db) {
    var entry = moleculeDB.db[idCode];
    if (entry.idCode === queryIdCode) {
      similarity = Number.MAX_SAFE_INTEGER;
    } else {
      similarity = OCL.SSSearcherWithIndex.getSimilarityTanimoto(queryIndex, entry.index) * 1000000 - Math.abs(queryMW - entry.properties.mw) / 10000;
    }
    searchResult.push({ similarity, entry });
  }
  searchResult.sort(function (a, b) {
    return b.similarity - a.similarity;
  });
  return searchResult.map(function (entry) {
    return entry.entry;
  });
}

function getMW(query) {
  var copy = query.getCompactCopy();
  copy.setFragment(false);
  return copy.getMolecularFormula().relativeWeight;
}

function processResult(entries) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$flattenResul2 = options.flattenResult,
      flattenResult = _options$flattenResul2 === undefined ? true : _options$flattenResul2,
      _options$keepMolecule2 = options.keepMolecule,
      keepMolecule = _options$keepMolecule2 === undefined ? false : _options$keepMolecule2,
      _options$limit2 = options.limit,
      limit = _options$limit2 === undefined ? Number.MAX_SAFE_INTEGER : _options$limit2;

  var results = [];

  if (flattenResult) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var entry = _step.value;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = entry.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var data = _step2.value;

            results.push({
              data,
              idCode: entry.idCode,
              properties: entry.properties,
              molecule: keepMolecule ? entry.molecule : undefined
            });
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = entries[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _entry = _step3.value;

        results.push({
          data: _entry.data,
          idCode: _entry.idCode,
          properties: _entry.properties,
          molecule: keepMolecule ? _entry.molecule : undefined
        });
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  }
  if (limit < results.length) results.length = limit;
  return results;
}

module.exports = search;