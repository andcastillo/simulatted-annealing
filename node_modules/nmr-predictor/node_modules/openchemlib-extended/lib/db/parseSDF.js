'use strict';

var sdfParser = require('sdf-parser');

var defaultSDFOptions = {
  onStep: function onStep() /* current, total*/{
    // empty function
  }
};

/**
 * Create a new DB from a CSV file
 * @memberof DB
 * @param {text} sdf - text file containing the sdf
 * @param {object} [options={}]
 * @param {boolean} [computeProperties=false]
 * @param {function} [options.onStep=()=>{}] call back to execute after each molecule
 * @returns {DB}
 */

function parseSDF(sdf) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof sdf !== 'string') {
    throw new TypeError('sdf must be a string');
  }
  var Molecule = this.OCL.Molecule;
  options = Object.assign({}, defaultSDFOptions, options);
  var db = new this.MoleculeDB(options);
  return new Promise(function (resolve, reject) {
    var parsed = sdfParser(sdf);
    var molecules = parsed.molecules;
    db.statistics = parsed.statistics;
    var i = 0;
    var l = molecules.length;
    parseNext();
    function parseNext() {
      if (i === l) {
        resolve(db);
        return;
      }
      try {
        db.pushEntry(Molecule.fromMolfile(molecules[i].molfile), molecules[i]);
      } catch (e) {
        reject(e);
        return;
      }
      options.onStep(++i, l);
      setImmediate(parseNext);
    }
  });
}

module.exports = parseSDF;